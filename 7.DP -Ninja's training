https://www.codingninjas.com/studio/problems/ninja-s-training_3621003
//------------------------------------------------------------------------------------------------------
//memoization
int recur(int day, int last, vector<vector<int>>&points,vector<vector<int>>&dp)
{
    if(day==0)
    {
        int maxm=0;
        for(int i=0; i<3; i++)
        {
            if(i!=last) maxm=max(maxm,points[0][i]);
        }
        return maxm;
    }
    if(dp[day][last]!=-1) return dp[day][last];
    int maxi=0;
    for(int i=0; i<3; i++)
    {
        int point=0;
        if(i!=last)
        {
            point=points[day][i]+recur(day-1,i,points,dp);
        }
        maxi=max(maxi,point);
    }
    return dp[day][last]=maxi;
}
int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
    //int day= points[0].size();
    //vector<vector<int>>dp(n+1, vector<int>(4,-1));
    //for(int i=0; i<=n; i++) { vector<int>v;for(int j=0; j<=3; j++)v.push_back(-1); dp.push_back(v);}
    //return recur(n-1,3,points,dp);
//----------------------------------------------------------------------------------------------------------------------

//tabulation.....
    vector<vector<int>>dp(n,vector<int>(4,0));
    //base case;;;;
    dp[0][0]=max(points[0][1],points[0][2]);
    dp[0][1]=max(points[0][0],points[0][2]);
    dp[0][2]=max(points[0][0],points[0][1]);
    dp[0][3]=max(points[0][0],max(points[0][1],points[0][2]));
    //initialization...
    for(int day=1; day<n; day++)
    {
        for(int last=0; last<4; last++)
        {
            dp[day][last]=0;
            int point=0;
             for(int task=0; task<3; task++)
                {
                    if(task!=last)
                    {
                        point=points[day][task]+dp[day-1][task];
                        dp[day][last]=max(dp[day][last],point);
                    }
                }
        }
    }
    return dp[n-1][3];

}
