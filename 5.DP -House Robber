https://leetcode.com/problems/house-robber/description/?envType=study-plan-v2&envId=dynamic-programming
//trying tabulation but space optimization
    // int recur(int ind, vector<int>&nums, vector<int>&dp)
    // {
    //     if(ind==0) return nums[ind];
    //     if(ind<0) return 0;
    //     if(dp[ind]!=-1) return dp[ind];
    //     //pick
    //     int y=recur(ind-1,nums,dp);
    //     int x=nums[ind]+recur(ind-2,nums,dp);
    //     return dp[ind]=max(x,y);
    //     //notpick
    // }
    int rob(vector<int>& nums) {
        int n=nums.size();
        // if(n==2) return max(nums[0],nums[1]);
        // vector<int>dp(n+1,0 );
        // int neg=0;
        // for(int i=1; i<n;i++)
        // {
        //     int pick=nums[i]; if(i>1) pick+=dp[i-2];
        //     int notpick=dp[i-1];
        //     dp[i]=max(pick,notpick);
        // }
        return dp[n-1];
        int prev=nums[0];
        int prev1=0;
        for(int i=1; i<n; i++)
        {
            int pick=nums[i];
            if(i>1) pick+=prev1;
            int notpick=prev;
            int curr=max(pick,notpick);
            prev1=prev; prev=curr;
        }
        return prev;
